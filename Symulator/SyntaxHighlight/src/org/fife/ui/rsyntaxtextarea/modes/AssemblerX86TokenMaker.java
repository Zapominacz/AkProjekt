/* The following code was generated by JFlex 1.4.1 on 10.04.15 22:50 */

/*
 * 12/06/2004
 *
 * AssemblerX86TokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing X86 assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing x86
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerX86TokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

public class AssemblerX86TokenMaker extends AbstractJFlexTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\10\1\7\1\0\1\10\23\0\1\10\1\14\1\4\2\0"+
                    "\1\13\1\14\1\5\2\0\1\12\1\12\1\3\1\12\1\15\1\12"+
                    "\1\2\1\35\1\35\1\35\1\35\1\35\1\35\1\35\1\35\1\35"+
                    "\1\11\1\6\1\14\1\14\1\14\2\0\1\17\1\26\1\33\1\16"+
                    "\1\21\1\36\1\23\1\41\1\30\1\43\1\1\1\24\1\40\1\27"+
                    "\1\25\1\34\1\1\1\32\1\31\1\20\1\37\2\1\1\22\1\42"+
                    "\1\1\1\3\1\0\1\3\1\14\1\1\1\0\1\17\1\26\1\33"+
                    "\1\16\1\21\1\36\1\23\1\41\1\30\1\43\1\1\1\24\1\40"+
                    "\1\27\1\25\1\34\1\1\1\32\1\31\1\20\1\37\2\1\1\22"+
                    "\1\42\1\1\1\0\1\14\1\0\1\14\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
                    "\1\10\14\1\1\11\1\1\1\12\1\13\1\14\7\0"+
                    "\3\1\1\15\5\1\1\16\4\1\1\15\2\1\10\0"+
                    "\1\15\2\1\1\15\4\1\4\0\1\12\2\0\1\1"+
                    "\3\0";

    private static int [] zzUnpackAction() {
        int [] result = new int[79];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
                    "\0\110\0\u0120\0\110\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4"+
                    "\0\u01f8\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4"+
                    "\0\u0318\0\u0318\0\110\0\110\0\u033c\0\u0360\0\u0384\0\u03a8"+
                    "\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480\0\154\0\u04a4"+
                    "\0\u04c8\0\u04ec\0\u0510\0\u0534\0\154\0\u0558\0\u057c\0\u05a0"+
                    "\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0"+
                    "\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0"+
                    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900"+
                    "\0\110\0\u0924\0\u0948\0\u05e8\0\u096c\0\u0990\0\u09b4";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[79];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
                    "\1\12\1\3\3\13\1\14\1\4\1\15\2\4\1\16"+
                    "\1\4\1\17\1\20\2\4\1\21\1\22\1\23\1\24"+
                    "\1\25\1\5\2\4\1\26\2\4\1\27\1\3\1\4"+
                    "\1\5\1\3\1\6\1\7\1\10\1\11\1\12\1\3"+
                    "\1\13\1\30\1\13\1\14\1\4\1\15\2\4\1\16"+
                    "\1\4\1\17\1\20\2\4\1\21\1\22\1\23\1\24"+
                    "\1\25\1\5\2\4\1\26\2\4\1\27\44\0\1\31"+
                    "\2\4\1\0\3\31\2\0\1\32\2\0\1\31\1\0"+
                    "\26\4\1\31\1\4\1\5\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\17\4\1\5\6\4\4\6\1\33"+
                    "\37\6\5\7\1\34\36\7\7\10\1\0\34\10\10\0"+
                    "\1\12\51\0\1\35\1\36\1\37\2\0\1\40\1\41"+
                    "\3\0\1\42\1\43\12\0\1\31\2\4\1\0\3\31"+
                    "\2\0\1\32\2\0\1\31\1\0\1\44\10\4\1\45"+
                    "\14\4\1\31\2\4\1\0\3\31\2\0\1\32\2\0"+
                    "\1\31\1\0\7\4\1\20\16\4\1\31\2\4\1\0"+
                    "\3\31\2\0\1\32\2\0\1\31\1\0\7\4\1\46"+
                    "\16\4\1\31\2\4\1\0\3\31\2\0\1\32\2\0"+
                    "\1\31\1\0\14\4\1\47\11\4\1\31\2\4\1\0"+
                    "\3\31\2\0\1\32\2\0\1\31\1\0\2\4\1\50"+
                    "\17\4\1\51\3\4\1\31\2\4\1\0\3\31\2\0"+
                    "\1\32\2\0\1\31\1\0\2\4\1\52\5\4\1\53"+
                    "\10\4\1\54\4\4\1\31\2\4\1\0\3\31\2\0"+
                    "\1\32\2\0\1\31\1\0\2\55\1\4\1\55\4\4"+
                    "\1\55\4\4\1\55\1\4\2\55\5\4\1\31\2\4"+
                    "\1\0\3\31\2\0\1\32\2\0\1\31\1\0\7\4"+
                    "\1\56\16\4\1\31\2\4\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\7\4\1\57\11\4\1\60\4\4"+
                    "\1\31\2\4\1\0\3\31\2\0\1\32\2\0\1\31"+
                    "\1\0\21\4\1\61\4\4\1\31\2\4\1\0\3\31"+
                    "\2\0\1\32\2\0\1\31\1\0\1\4\1\62\3\4"+
                    "\2\62\1\47\1\62\1\63\3\4\1\47\1\64\7\4"+
                    "\1\0\2\30\13\0\26\30\3\31\1\0\3\31\2\0"+
                    "\1\31\2\0\1\31\1\0\26\31\17\0\1\65\55\0"+
                    "\1\66\33\0\1\67\46\0\1\70\44\0\1\71\45\0"+
                    "\1\72\34\0\1\73\13\0\1\74\7\0\1\31\2\4"+
                    "\1\0\3\31\2\0\1\32\2\0\1\31\1\0\1\75"+
                    "\25\4\1\31\2\4\1\0\3\31\2\0\1\32\2\0"+
                    "\1\31\1\0\1\47\25\4\1\31\2\4\1\0\3\31"+
                    "\2\0\1\32\2\0\1\31\1\0\1\4\1\45\24\4"+
                    "\1\31\2\4\1\0\3\31\2\0\1\32\2\0\1\31"+
                    "\1\0\14\4\1\57\11\4\1\31\2\4\1\0\3\31"+
                    "\2\0\1\32\2\0\1\31\1\0\21\4\1\76\4\4"+
                    "\1\31\2\4\1\0\3\31\2\0\1\32\2\0\1\31"+
                    "\1\0\7\4\1\77\16\4\1\31\2\4\1\0\3\31"+
                    "\2\0\1\32\2\0\1\31\1\0\6\4\1\75\5\4"+
                    "\1\75\11\4\1\31\2\4\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\10\4\1\100\15\4\1\31\2\4"+
                    "\1\0\3\31\2\0\1\32\2\0\1\31\1\0\16\4"+
                    "\1\101\7\4\1\31\2\4\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\16\4\1\47\7\4\1\31\2\4"+
                    "\1\0\3\31\2\0\1\32\2\0\1\31\1\0\13\4"+
                    "\1\102\12\4\1\31\2\4\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\6\4\1\47\17\4\1\31\2\4"+
                    "\1\0\3\31\2\0\1\32\2\0\1\31\1\0\3\4"+
                    "\1\47\22\4\1\31\2\4\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\3\4\1\103\3\4\1\47\5\4"+
                    "\1\47\10\4\1\31\2\4\1\0\3\31\2\0\1\32"+
                    "\2\0\1\31\1\0\7\4\1\104\16\4\20\0\1\105"+
                    "\56\0\1\106\32\0\1\72\46\0\1\107\45\0\1\110"+
                    "\34\0\1\111\55\0\1\112\30\0\1\113\24\0\1\31"+
                    "\2\4\1\0\3\31\2\0\1\32\2\0\1\31\1\0"+
                    "\15\4\1\47\10\4\1\31\2\4\1\0\3\31\2\0"+
                    "\1\32\2\0\1\31\1\0\6\4\1\47\14\4\1\47"+
                    "\2\4\1\31\2\4\1\0\3\31\2\0\1\32\2\0"+
                    "\1\31\1\0\14\4\1\114\11\4\1\31\2\4\1\0"+
                    "\3\31\2\0\1\32\2\0\1\31\1\0\10\4\1\47"+
                    "\15\4\1\31\2\4\1\0\3\31\2\0\1\32\2\0"+
                    "\1\31\1\0\24\4\1\47\1\4\1\31\2\4\1\0"+
                    "\3\31\2\0\1\32\2\0\1\31\1\0\23\4\1\47"+
                    "\2\4\1\31\2\4\1\0\3\31\2\0\1\32\2\0"+
                    "\1\31\1\0\5\4\1\47\20\4\1\31\2\4\1\0"+
                    "\3\31\2\0\1\32\2\0\1\31\1\0\13\4\1\47"+
                    "\12\4\17\0\1\111\54\0\1\115\41\0\1\116\40\0"+
                    "\1\111\50\0\1\71\46\0\1\117\40\0\1\111\37\0"+
                    "\1\111\40\0\1\111\22\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[2520];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\5\1\1\11\1\1\1\11\17\1\2\11"+
                    "\7\0\21\1\10\0\10\1\4\0\1\11\2\0\1\1"+
                    "\3\0";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[79];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

  /* user code: */


    /**
     * Constructor.  We must have this here as JFLex does not generate a
     * no parameter constructor.
     */
    public AssemblerX86TokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { ";", null };
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *                    <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }




    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public AssemblerX86TokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public AssemblerX86TokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 194) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
//    private boolean zzRefill() throws java.io.IOException {
//
//    /* first: make room (if you can) */
//        if (zzStartRead > 0) {
//            System.arraycopy(zzBuffer, zzStartRead,
//                    zzBuffer, 0,
//                    zzEndRead-zzStartRead);
//
//      /* translate stored positions */
//            zzEndRead-= zzStartRead;
//            zzCurrentPos-= zzStartRead;
//            zzMarkedPos-= zzStartRead;
//            zzPushbackPos-= zzStartRead;
//            zzStartRead = 0;
//        }
//
//    /* is the buffer big enough? */
//        if (zzCurrentPos >= zzBuffer.length) {
//      /* if not: blow it up */
//            char newBuffer[] = new char[zzCurrentPos*2];
//            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
//            zzBuffer = newBuffer;
//        }
//
//    /* finally: fill the buffer with new input */
//        int numRead = zzReader.read(zzBuffer, zzEndRead,
//                zzBuffer.length-zzEndRead);
//
//        if (numRead < 0) {
//            return true;
//        }
//        else {
//            zzEndRead+= numRead;
//            return false;
//        }
//    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
//    public final void yyreset(java.io.Reader reader) {
//        zzReader = reader;
//        zzAtBOL  = true;
//        zzAtEOF  = false;
//        zzEndRead = zzStartRead = 0;
//        zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
//        yyline = yychar = yycolumn = 0;
//        zzLexicalState = YYINITIAL;
//    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            if (zzMarkedPosL > zzStartRead) {
                switch (zzBufferL[zzMarkedPosL-1]) {
                    case '\n':
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        zzAtBOL = true;
                        break;
                    case '\r':
                        if (zzMarkedPosL < zzEndReadL)
                            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                        else if (zzAtEOF)
                            zzAtBOL = false;
                        else {
                            boolean eof = zzRefill();
                            zzMarkedPosL = zzMarkedPos;
                            zzEndReadL = zzEndRead;
                            zzBufferL = zzBuffer;
                            if (eof)
                                zzAtBOL = false;
                            else
                                zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                        }
                        break;
                    default:
                        zzAtBOL = false;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            if (zzAtBOL)
                zzState = ZZ_LEXSTATE[zzLexicalState+1];
            else
                zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 13:
                { addToken(Token.RESERVED_WORD);
                }
                case 15: break;
                case 1:
                { addToken(Token.IDENTIFIER);
                }
                case 16: break;
                case 11:
                { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 17: break;
                case 9:
                { addToken(Token.FUNCTION);
                }
                case 18: break;
                case 5:
                { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
                }
                case 19: break;
                case 14:
                { addToken(Token.VARIABLE);
                }
                case 20: break;
                case 7:
                { addToken(Token.WHITESPACE);
                }
                case 21: break;
                case 10:
                { addToken(Token.PREPROCESSOR);
                }
                case 22: break;
                case 4:
                { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
                }
                case 23: break;
                case 8:
                { addToken(Token.OPERATOR);
                }
                case 24: break;
                case 2:
                { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 25: break;
                case 12:
                { addToken(Token.LITERAL_CHAR);
                }
                case 26: break;
                case 3:
                { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
                }
                case 27: break;
                case 6:
                { addNullToken(); return firstToken;
                }
                case 28: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken(); return firstToken;
                            }
                            case 80: break;
                            default:
                                return null;
                        }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
